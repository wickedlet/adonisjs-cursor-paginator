#!/usr/bin/env node

/**
 * Standalone setup script for adonisjs-cursor-paginator
 * This allows users to run: npx adonisjs-cursor-paginator setup
 */

import { readFile, writeFile, mkdir } from 'node:fs/promises'
import { existsSync } from 'node:fs'
import { join } from 'node:path'

async function main() {
  const args = process.argv.slice(2)
  
  if (args[0] !== 'setup') {
    console.log('Usage: npx adonisjs-cursor-paginator setup')
    process.exit(1)
  }

  console.log('üöÄ Setting up cursor pagination...')

  try {
    // 1. Create types directory if not exists
    await createTypesDirectory()
    
    // 2. Create cursor.d.ts
    await createTypesFile()
    
    // 3. Create provider
    await createProvider()
    
    // 4. Update adonisrc.ts
    await updateAdonisrc()
    
    console.log('‚úÖ Cursor pagination setup completed!')
    console.log('')
    console.log('üéâ You can now use cursorPaginate() in your Lucid queries:')
    console.log('   const result = await User.query().cursorPaginate(10)')
    console.log('')
    
  } catch (error) {
    console.error('‚ùå Setup failed:', error instanceof Error ? error.message : String(error))
    process.exit(1)
  }
}

async function createTypesDirectory() {
  const typesDir = join(process.cwd(), 'types')
  if (!existsSync(typesDir)) {
    await mkdir(typesDir, { recursive: true })
    console.log('üìÅ Created types/ directory')
  }
}

async function createTypesFile() {
  const typesFile = join(process.cwd(), 'types', 'cursor.d.ts')
  
  if (existsSync(typesFile)) {
    console.log('‚ö†Ô∏è  types/cursor.d.ts already exists, skipping...')
    return
  }

  const typesContent = `/**
 * Cursor pagination types for AdonisJS
 * Auto-generated by adonisjs-cursor-paginator
 */

import type { CursorPaginator } from 'adonisjs-cursor-paginator'
import type { LucidModel } from '@adonisjs/lucid/types/model'

declare module '@adonisjs/lucid/types/model' {
  interface ModelQueryBuilderContract<Model extends LucidModel, Result = InstanceType<Model>> {
    cursorPaginate<T = Result>(limit: number, cursor?: string | null): Promise<CursorPaginator<T>>
  }
}
`

  await writeFile(typesFile, typesContent, 'utf-8')
  console.log('‚úÖ Created types/cursor.d.ts')
}

async function createProvider() {
  const providerFile = join(process.cwd(), 'providers', 'cursor_paginator_provider.ts')
  
  if (existsSync(providerFile)) {
    console.log('‚ö†Ô∏è  providers/cursor_paginator_provider.ts already exists, skipping...')
    return
  }

  // Create providers directory if not exists
  const providersDir = join(process.cwd(), 'providers')
  if (!existsSync(providersDir)) {
    await mkdir(providersDir, { recursive: true })
    console.log('üìÅ Created providers/ directory')
  }

  const providerContent = `import type { ApplicationService } from '@adonisjs/core/types'

/**
 * Cursor Paginator Provider
 * Auto-generated by adonisjs-cursor-paginator
 */
export default class CursorPaginatorProvider {
  constructor(protected app: ApplicationService) {}

  async boot() {
    const { CursorPaginator } = await import('adonisjs-cursor-paginator')
    const { ModelQueryBuilder } = await import('@adonisjs/lucid/orm')
    const { DatabaseQueryBuilder } = await import('@adonisjs/lucid/database')
    
    CursorPaginator.boot(ModelQueryBuilder, DatabaseQueryBuilder)
  }
}
`

  await writeFile(providerFile, providerContent, 'utf-8')
  console.log('‚úÖ Created providers/cursor_paginator_provider.ts')
}

async function updateAdonisrc() {
  const adonisrcFile = join(process.cwd(), 'adonisrc.ts')
  
  if (!existsSync(adonisrcFile)) {
    console.error('‚ùå adonisrc.ts not found. Are you in an AdonisJS project?')
    throw new Error('adonisrc.ts not found')
  }

  let content = await readFile(adonisrcFile, 'utf-8')
  
  // Check if provider already added
  if (content.includes('cursor_paginator_provider')) {
    console.log('‚ö†Ô∏è  Provider already registered in adonisrc.ts, skipping...')
    return
  }

  // Find providers array and add our provider
  const providerRegex = /(providers:\s*\[[\s\S]*?)(\s*\]\s*,?)/
  const match = content.match(providerRegex)
  
  if (!match) {
    console.error('‚ùå Could not find providers array in adonisrc.ts')
    throw new Error('Invalid adonisrc.ts format')
  }

  const beforeClosing = match[1]
  const closing = match[2]
  
  // Add our provider before the closing bracket
  const newProvider = "\n    () => import('#providers/cursor_paginator_provider'),"
  const updatedProviders = beforeClosing + newProvider + closing
  
  content = content.replace(providerRegex, updatedProviders)
  
  await writeFile(adonisrcFile, content, 'utf-8')
  console.log('‚úÖ Updated adonisrc.ts with cursor paginator provider')
}

main().catch(console.error)
