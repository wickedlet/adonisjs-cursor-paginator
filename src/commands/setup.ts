import { BaseCommand } from '@adonisjs/core/ace'
import type { CommandOptions } from '@adonisjs/core/types/ace'
import { readFile, writeFile, mkdir } from 'node:fs/promises'
import { existsSync } from 'node:fs'
import { join } from 'node:path'

export default class Setup extends BaseCommand {
  static commandName = 'cursor-paginator:setup'
  static description = 'Setup cursor pagination for AdonisJS Lucid ORM'

  static options: CommandOptions = {
    startApp: false,
  }

  async run() {
    this.logger.info('üöÄ Setting up cursor pagination...')

    try {
      // 1. Create types directory if not exists
      await this.createTypesDirectory()
      
      // 2. Create cursor.d.ts
      await this.createTypesFile()
      
      // 3. Create provider
      await this.createProvider()
      
      // 4. Update adonisrc.ts
      await this.updateAdonisrc()
      
      this.logger.success('‚úÖ Cursor pagination setup completed!')
      this.logger.info('')
      this.logger.info('üéâ You can now use cursorPaginate() in your Lucid queries:')
      this.logger.info('   const result = await User.query().cursorPaginate(10)')
      this.logger.info('')
      
    } catch (error) {
      this.logger.error(`‚ùå Setup failed: ${error instanceof Error ? error.message : String(error)}`)
      this.exitCode = 1
    }
  }

  private async createTypesDirectory() {
    const typesDir = join(process.cwd(), 'types')
    if (!existsSync(typesDir)) {
      await mkdir(typesDir, { recursive: true })
      this.logger.info('üìÅ Created types/ directory')
    }
  }

  private async createTypesFile() {
    const typesFile = join(process.cwd(), 'types', 'cursor.d.ts')
    
    if (existsSync(typesFile)) {
      this.logger.info('‚ö†Ô∏è  types/cursor.d.ts already exists, skipping...')
      return
    }

    const typesContent = `/**
 * Cursor pagination types for AdonisJS
 * Auto-generated by adonisjs-cursor-paginator
 */

import type { CursorPaginator } from 'adonisjs-cursor-paginator'
import type { LucidModel } from '@adonisjs/lucid/types/model'

declare module '@adonisjs/lucid/types/model' {
  interface ModelQueryBuilderContract<Model extends LucidModel, Result = InstanceType<Model>> {
    cursorPaginate<T = Result>(limit: number, cursor?: string | null): Promise<CursorPaginator<T>>
  }
}
`

    await writeFile(typesFile, typesContent, 'utf-8')
    this.logger.success('‚úÖ Created types/cursor.d.ts')
  }

  private async createProvider() {
    const providerFile = join(process.cwd(), 'providers', 'cursor_paginator_provider.ts')
    
    if (existsSync(providerFile)) {
      this.logger.info('‚ö†Ô∏è  providers/cursor_paginator_provider.ts already exists, skipping...')
      return
    }

    // Create providers directory if not exists
    const providersDir = join(process.cwd(), 'providers')
    if (!existsSync(providersDir)) {
      await mkdir(providersDir, { recursive: true })
      this.logger.info('üìÅ Created providers/ directory')
    }

    const providerContent = `import type { ApplicationService } from '@adonisjs/core/types'

/**
 * Cursor Paginator Provider
 * Auto-generated by adonisjs-cursor-paginator
 */
export default class CursorPaginatorProvider {
  constructor(protected app: ApplicationService) {}

  async boot() {
    const { CursorPaginator } = await import('adonisjs-cursor-paginator')
    const { ModelQueryBuilder } = await import('@adonisjs/lucid/orm')
    const { DatabaseQueryBuilder } = await import('@adonisjs/lucid/database')
    
    CursorPaginator.boot(ModelQueryBuilder, DatabaseQueryBuilder)
  }
}
`

    await writeFile(providerFile, providerContent, 'utf-8')
    this.logger.success('‚úÖ Created providers/cursor_paginator_provider.ts')
  }

  private async updateAdonisrc() {
    const adonisrcFile = join(process.cwd(), 'adonisrc.ts')
    
    if (!existsSync(adonisrcFile)) {
      this.logger.error('‚ùå adonisrc.ts not found. Are you in an AdonisJS project?')
      throw new Error('adonisrc.ts not found')
    }

    let content = await readFile(adonisrcFile, 'utf-8')
    
    // Check if provider already added
    if (content.includes('cursor_paginator_provider')) {
      this.logger.info('‚ö†Ô∏è  Provider already registered in adonisrc.ts, skipping...')
      return
    }

    // Find the last import line in providers array and insert after it
    const lines = content.split('\n')
    let insertIndex = -1
    let inProvidersArray = false
    let arrayDepth = 0
    
    for (let i = 0; i < lines.length; i++) {
      const line = lines[i].trim()
      
      // Start of providers array
      if (line.includes('providers: [')) {
        inProvidersArray = true
        arrayDepth = 1
        continue
      }
      
      if (inProvidersArray) {
        // Count brackets and braces to track nesting
        for (const char of line) {
          if (char === '[' || char === '{') arrayDepth++
          if (char === ']' || char === '}') arrayDepth--
        }
        
        // If we're back to depth 1 and see closing ], this is the end of providers array
        if (arrayDepth === 0 && line.includes('],')) {
          insertIndex = i // Insert right before this closing line
          break
        }
        
        // If this line has an import and we're at the top level of providers array
        if (arrayDepth === 1 && line.includes("() => import(") && line.includes("'),")) {
          insertIndex = i + 1 // Remember this position, we'll insert after the last import
        }
      }
    }
    
    if (insertIndex === -1) {
      this.logger.error('‚ùå Could not find suitable position in providers array')
      throw new Error('Invalid adonisrc.ts format')
    }
    
    // Insert our provider at the found position
    lines.splice(insertIndex, 0, "    () => import('#providers/cursor_paginator_provider'),")
    content = lines.join('\n')
    
    await writeFile(adonisrcFile, content, 'utf-8')
    this.logger.success('‚úÖ Updated adonisrc.ts with cursor paginator provider')
  }
}
